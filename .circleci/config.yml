version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13

set_environment: &set_environment
  run:
    name: Setting Environmental Variables
    command: |
      cd && touch $BASH_ENV
      echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY' >> $BASH_ENV
      echo 'export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY' >> $BASH_ENV

base_terraform_image: &base_terraform_image
  hashicorp/terraform:0.12.2

base_python_image: &base_python_image
  circleci/python:3.7
  
working_directory: &working_directory
  ~/working

terraform_config: &terraform_config
  docker:
    - image: *base_terraform_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

python_config: &python_config
  docker:
    - image: *base_python_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

run_terraform_init: &run_terraform_init
  run:
    name: Running Terraform Init
    command: |
      mkdir -p ~/.ssh && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
      source $BASH_ENV
      cd terraform
      ls -ltr
      terraform init

run_terraform_plan: &run_terraform_plan
  run:
    name: Running Terraform Plan
    command: |
      source $BASH_ENV
      pwd && ls -ltr
      cd terraform
      terraform plan -out=terraform.plan

run_terraform_apply: &run_terraform_apply
  run:
    name: Running Terraform Apply
    command: |
      source $BASH_ENV
      cd terraform
      terraform apply terraform.plan

run_terraform_destroy: &run_terraform_destroy
  run:
    name: Running Terraform Destroy
    command: |
      source $BASH_ENV
      cd terraform
      terraform destroy -auto-approve

install_app_dependencies: &install_app_dependencies
  run:
    name: Install App Dependencies
    command: |
      python3 -m venv venv
      source venv/bin/activate
      pip3 install -r app/requirements.txt

zip_requirements_package: &zip_requirements_package
  run:
    name: Zip Requirements Package
    command: |
      mkdir -p build/python/lib/python3.7/site-packages
      source venv/bin/activate
      shopt -s dotglob
      mv venv/lib/python3.7/site-packages/* build/python/lib/python3.7/site-packages/
      cd build
      zip -r9 ../app/requirements.zip .

zip_app_package: &zip_app_package
  run:
    name: Zip App Package
    command: |
      cd app
      zip -r9 ../app/app.zip .

restore_requirements_cache: &restore_requirements_cache
  restore_cache:
    key: requirements-{{checksum "app/requirements.txt" }}

save_requirements_cache: &save_requirements_cache
  save_cache:
    key: requirements-{{checksum "app/requirements.txt" }}
    paths:
      - ./venv

jobs:
  checkout-repo:
    <<: *python_config
    steps:
      - checkout
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/

  install-requirements:
    <<: *python_config
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - *restore_requirements_cache
      - *install_app_dependencies
      - *save_requirements_cache

  install-test-requirements:
    <<: *python_config
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install App Dependencies
          command: |
            source venv/bin/activate
            pip3 install -r tests/test_requirements.txt
      - save_cache:
          key: test-ready-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/ 

  unit-testing:
    <<: *python_config
    steps:
      - restore_cache:
          key: test-ready-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Execute Unit Tests
          command: |
          source venv/bin/activate
          py.test tests/unit-tests

  integration-testing:
    <<: *python_config
    steps:
      - restore_cache:
          key: test-ready-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Execute Integration Tests
          command: |
          source venv/bin/activate
          py.test tests/integration-tests

  build-lambda-requirements:
    <<: *python_config    
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - *restore_requirements_cache
      - *zip_requirements_package
      - persist_to_workspace:
          root: *working_directory
          paths:
            - app/requirements.zip

  build-lambda-app:
    <<: *python_config
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - *zip_app_package
      - persist_to_workspace:
          root: *working_directory
          paths:
            - app/app.zip

  terraform-plan:
    <<: *terraform_config
    steps:
      - checkout
      - *set_environment
      - attach_workspace:
          at: *working_directory
      - *save_repo
      - *run_terraform_init
      - *run_terraform_plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform/terraform.plan

  terraform-apply:
      <<: *terraform_config
      steps:
        - *restore_repo
        - *set_environment
        - attach_workspace:
            at: *working_directory
        - *run_terraform_init
        - *run_terraform_apply

  terraform-destroy:
      <<: *terraform_config
      steps:
        - *set_environment
        - *restore_repo
        - *run_terraform_init
        - *run_terraform_destroy

workflows:
  version: 1
  deploy-infra-and-app: 
    jobs:
      - checkout-repo
      - install-requirements:
          requires:
            - checkout-repo
      - install-test-requirements:
          requires:
            - install-requirements
      - unit-testing:
          requires:
            - install-test-requirements
      - integration-testing:
          requires:
            - install-test-requirements
      - build-lambda-requirements:
          requires:
            - install-requirements
      - build-lambda-app:
          requires:
            - checkout-repo
      - terraform-plan:
          requires:
            - build-lambda-app
            - build-lambda-requirements
      - terraform-apply:
          requires:
            - terraform-plan
            - unit-testing
            - integration-testing
#      - terraform-destroy:
#          requires:
#            - terraform-apply
